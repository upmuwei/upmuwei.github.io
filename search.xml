<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java详解</title>
    <url>/2019/11/22/Java%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言详解</title>
    <url>/2019/11/22/C%E8%AF%AD%E8%A8%80%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>nice<br>nice<br>nice</p>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/2019/11/22/hello-world/</url>
    <content><![CDATA[<h1 id="c-socket-practise"><a href="#c-socket-practise" class="headerlink" title="c_socket_practise"></a>c_socket_practise</h1><p>学习TCP/IP网络编程代码</p><h2 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h2><h2 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h2><ul>
<li>已连接UDP套接字（connected） 调用connect（）,注册目标地址信息</li>
<li>未连接UDP套接字（unconnected） 未注册目标地址信息</li>
</ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul>
<li>O_CREAT 必要时创建文件</li>
<li>O_TRUNC 删除全部现有数据</li>
<li>O_APPEND 维持现有数据，保存到其后面</li>
<li>O_RDONLY 只读打开</li>
<li>O_WRONLY 只写打开</li>
<li>O_RDWR 读写打开</li>
</ul><a id="more"></a>


<h2 id="断开套接字连接"><a href="#断开套接字连接" class="headerlink" title="断开套接字连接"></a>断开套接字连接</h2><ul>
<li>断开一部分连接指可以传输数据但是无法接收数据，或可以接收数据但无法传输数据</li>
<li>两台主机通过套接字建立连接后进入可交换状态，又称“流形成的状态”</li>
</ul>
<h3 id="shutdown（）参数（断开方式）"><a href="#shutdown（）参数（断开方式）" class="headerlink" title="shutdown（）参数（断开方式）"></a>shutdown（）参数（断开方式）</h3><h4 id="1-Linux"><a href="#1-Linux" class="headerlink" title="1.Linux"></a>1.Linux</h4><ul>
<li>SHUT_RD：断开输入流</li>
<li>SHUT_WR：断开输出流</li>
<li>SHUT_RDWR：同时断开I/O流</li>
</ul>
<h4 id="2-Windows"><a href="#2-Windows" class="headerlink" title="2.Windows"></a>2.Windows</h4><ul>
<li>SD_RECEIVE：断开输入流</li>
<li>SD_SEND：断开输出流</li>
<li>SD_BOTH：同时断开I/O流</li>
</ul>
<h2 id="获取IP地址"><a href="#获取IP地址" class="headerlink" title="获取IP地址"></a>获取IP地址</h2><h3 id="利用域名获取IP地址"><a href="#利用域名获取IP地址" class="headerlink" title="利用域名获取IP地址"></a>利用域名获取IP地址</h3><p>#include &lt;netdb.h&gt;<br>struct hostent * gethostbyname(const char* hostname); //成功时返回hostent结构体地址，失败时返回NULL指针</p>
<h3 id="利用IP地址获取域名"><a href="#利用IP地址获取域名" class="headerlink" title="利用IP地址获取域名"></a>利用IP地址获取域名</h3><p>struct hostent * gethostbyaddr(const char * addr, socklen_t len, int family);</p>
<pre><code>struct hostent  
{  
    char * h_name;  //官方域名  
    char ** h_aliases; //别名，一个IP可以绑定多个域名  
    int h_addrtype;  // IP地址类型 IPV4 OR IPV6  
    int h_length; //地址长度  
    char ** h_addr_list; //IP地址信息  
}  </code></pre><p>char* inet_ntoa(struct in_addr adr) 把32位ip地址转化为字符串，失败时返回-1  </p>
<p>指针对象不明确时，可以使用void指针类型  </p>
<h2 id="销毁僵尸进程"><a href="#销毁僵尸进程" class="headerlink" title="销毁僵尸进程"></a>销毁僵尸进程</h2><p>僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息,<br>那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。</p>
<h3 id="wait函数销毁僵尸进程"><a href="#wait函数销毁僵尸进程" class="headerlink" title="wait函数销毁僵尸进程"></a>wait函数销毁僵尸进程</h3><p>#inlcude &lt;sys/wait.h&gt;<br>pid_t wait(int *statloc); //成功时返回终止的子进程ID，失败时返回-1<br>WIFEXITED 子进程正常终止时返回“真”<br>WEXITSTATUS返回子进程的返回值<br>调用wait函数时，如果没有已终止的子进程，那么程序将阻塞直到有子进程终止  </p>
<h3 id="waitpid函数销毁僵尸进程"><a href="#waitpid函数销毁僵尸进程" class="headerlink" title="waitpid函数销毁僵尸进程"></a>waitpid函数销毁僵尸进程</h3><p>#inlcude &lt;sys/wait.h&gt;<br>pid_t waitpid(pid_t pid, int * statloc, int options); //成功时返回终止的子进程ID(或0)，失败时返回-1<br>pid 等待终止的目标子进程ID，若传递-1，则与wait函数相同，可以等待任意子进程终止<br>statloc 与wait函数的statloc参数具有相同含义<br>options 传递头文件sys/wait.h中声明的常量WNOHANG，即使没有终止的子进程也不会进入阻塞状态，而是返回0并退出程序  </p>
<h3 id="信号（signal-处理机制"><a href="#信号（signal-处理机制" class="headerlink" title="信号（signal)处理机制"></a>信号（signal)处理机制</h3><p>#inlcude &lt;signal.h&gt;  </p>
<p>void (*signal(int signo, void (*func)(int)))(int); //为了在产生信号时调用，返回之前注册的函数指针<br>发生信号时将唤醒由于调用sleep函数而进入阻塞状态的进程</p>
<p>SIGALRM：已到通过调用alarm函数注册的时间<br>SIGINT：输入CTRL+C<br>SIGCHLD：子进程终止  </p>
<p>#include &lt;unistd.h&gt;</p>
<p>unsigned int alarm(unsigned int seconds); //返回0或以秒为单位的距SIGALRM信号发生所剩时间  </p>
<h3 id="sigaction函数处理信号"><a href="#sigaction函数处理信号" class="headerlink" title="sigaction函数处理信号"></a>sigaction函数处理信号</h3><p>#include &lt;signal.h&gt;  </p>
<p>int sigaction(int signo, const struct sigaction * act, struct sigaction * oldact); //成功时返回0，失败时返回-1  </p>
<pre><code>struct sigaction
{
    void (*sa_handler)(int);
    sigset_t sa_mask;
    int sa_flags;
}</code></pre><p>sa_handler成员保存信号处理函数的指针。sa_mask和sa_flags的所有位均初始化为0  </p>
<h3 id="并发服务"><a href="#并发服务" class="headerlink" title="并发服务"></a>并发服务</h3><p>调用fork函数时复制父进程的所有资源，不包括套接字。套接字并非进程所有，进程拥有代表相应套接字的文件描述符  </p>
<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>#include &lt;unistd.h&gt;  </p>
<p>int pipe(int filedes[2]); //成功时返回0，失败时返回-1<br>filedes[0] 通过管道接收数据时使用的文件描述符， 即管道入口<br>filedes[1] 通过管道传输数据时使用的文件描述符，时管道出口</p>
<h2 id="I-O复用-select函数使用"><a href="#I-O复用-select函数使用" class="headerlink" title="I/O复用 select函数使用"></a>I/O复用 select函数使用</h2><p>使用select函数时可以将多个文件描述符统一进行监视，集中时需要按照监事项（接收、传输、异常）进行分区，即按照上述3种监视项分成3类  </p>
<p>#include &lt;sys/select.h&gt;<br>#include &lt;sys/time.h&gt;  </p>
<p>int select(int maxfd, fd_set * readset, fd_set * writeset, fd_set * excepset, const struct timeval * timeout);<br>maxfd  监视对象文件描述符数量<br>readset 将所有关注“是否存在待读取数据”的文件描述符注册到fd_set型变量，并传递其地址值<br>writeset 将所有关注“是否可传输无阻塞数据”的文件描述符注册到fd_set型变量，并传递其地址值<br>exceptset 将所有关注“是否发生异常”的文件描述符注册到fd_set型变量，并传递其地址值<br>timeout 调用select函数后，为防止陷入无限阻塞状态，传递超时信息<br>返回值  失败时返回-1，成功时返回大于0的值、该值为发生事件的文件描述符数  </p>
<pre><code>struct timeval
{
    long tv_sec; //seconds
    long tv_usec; //microseconds
}</code></pre><p>指定超时函数select函数长时间处于阻塞状态,超时后select函数返回0  </p>
<p>FD_ZERO(fd_set * fdset):将fd_set变量所有位初始化为0<br>FD_SET(int fd, fd_set * fdset):在参数fdset指向的变量中注册文件描述符fd的信息<br>FD_CLR(int fd, fd_set * fdset):从参数fdset指向的变量中清楚文件描述符fd的信息<br>FD_ISSET(int fd, fd_set * fdset):若参数fdset指向的变量中包含文件描述符fd的信息，则返回“真”  </p>
<h2 id="发送紧急消息-带外数据"><a href="#发送紧急消息-带外数据" class="headerlink" title="发送紧急消息(带外数据)"></a>发送紧急消息(带外数据)</h2><p>MSG_OOB:发送紧急消息，用于传输带外数据（Out-of-band data）<br>通过可选项MSG_OOB传输数据时只传输1个字节<br>紧急指针指向紧急消息的下一个位置<br>通过MSG_OOB可选项传递数据时不会加快数据传输速度<br>除紧急指针的前面一个字节外，数据接收方将通过调用常用输入函数读取剩余部分。紧急消息的意义在于督促消息处理，而非紧急传输形式受限的消息  ‘</p>
<h3 id="检查输入缓冲"><a href="#检查输入缓冲" class="headerlink" title="检查输入缓冲"></a>检查输入缓冲</h3><p>同时设置MSG_PEEK选项和MSG_DONTWAIT选项，以验证输入缓冲中是否存在接收的数据。<br>MSG_PEEK 验证输入缓冲区是否存在接收数据，不会删除输入缓冲区中数据<br>MSG_DONTROUTE 数据传输过程中不参照路由（Routing）表，在本地（Local）网络中寻找目的地  </p>
<h3 id="readv-amp-writev函数"><a href="#readv-amp-writev函数" class="headerlink" title="readv &amp; writev函数"></a>readv &amp; writev函数</h3><p>通过writev函数可以将分散保存在多个缓冲中的数据一并发送，通过readv函数可以由多个缓冲分别接收<br>#include &lt;sys/uio.h&gt;<br>ssize_t writev(int filedes, const struct iovec * iov, int iovcnt); //成功时返回发送的字节数，失败时返回-1<br>filedes 表示数据传输的套接字文件描述符。但该函数并不只限于套接字<br>iov iovec结构体数组的地址值，结构体iovec中包含待发送数据的位置和大小信息<br>iovcnt  向第二个参数传递的数组长度  </p>
<pre><code>struct iovec
{
    void * iov_base; //缓冲地址
    size_t iov_len; //缓冲大小
}</code></pre><p>#include &lt;sys/uio.h&gt;<br>ssize_t readv(int filedes, const struct iovec * iov, int iocnt); //成功时返回接收的字节数，失败时返回-1  </p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C语言网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>hello</title>
    <url>/2019/11/22/hello/</url>
    <content><![CDATA[<h1 id="c-socket-practise"><a href="#c-socket-practise" class="headerlink" title="c_socket_practise"></a>c_socket_practise</h1><p>学习TCP/IP网络编程代码</p><h2 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h2><h2 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h2><ul>
<li>已连接UDP套接字（connected） 调用connect（）,注册目标地址信息</li>
<li>未连接UDP套接字（unconnected） 未注册目标地址信息</li>
</ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul>
<li>O_CREAT 必要时创建文件</li>
<li>O_TRUNC 删除全部现有数据</li>
<li>O_APPEND 维持现有数据，保存到其后面</li>
<li>O_RDONLY 只读打开</li>
<li>O_WRONLY 只写打开</li>
<li>O_RDWR 读写打开</li>
</ul><a id="more"></a>


<h2 id="断开套接字连接"><a href="#断开套接字连接" class="headerlink" title="断开套接字连接"></a>断开套接字连接</h2><ul>
<li>断开一部分连接指可以传输数据但是无法接收数据，或可以接收数据但无法传输数据</li>
<li>两台主机通过套接字建立连接后进入可交换状态，又称“流形成的状态”</li>
</ul>
<h3 id="shutdown（）参数（断开方式）"><a href="#shutdown（）参数（断开方式）" class="headerlink" title="shutdown（）参数（断开方式）"></a>shutdown（）参数（断开方式）</h3><h4 id="1-Linux"><a href="#1-Linux" class="headerlink" title="1.Linux"></a>1.Linux</h4><ul>
<li>SHUT_RD：断开输入流</li>
<li>SHUT_WR：断开输出流</li>
<li>SHUT_RDWR：同时断开I/O流</li>
</ul>
<h4 id="2-Windows"><a href="#2-Windows" class="headerlink" title="2.Windows"></a>2.Windows</h4><ul>
<li>SD_RECEIVE：断开输入流</li>
<li>SD_SEND：断开输出流</li>
<li>SD_BOTH：同时断开I/O流</li>
</ul>
<h2 id="获取IP地址"><a href="#获取IP地址" class="headerlink" title="获取IP地址"></a>获取IP地址</h2><h3 id="利用域名获取IP地址"><a href="#利用域名获取IP地址" class="headerlink" title="利用域名获取IP地址"></a>利用域名获取IP地址</h3><p>#include &lt;netdb.h&gt;<br>struct hostent * gethostbyname(const char* hostname); //成功时返回hostent结构体地址，失败时返回NULL指针</p>
<h3 id="利用IP地址获取域名"><a href="#利用IP地址获取域名" class="headerlink" title="利用IP地址获取域名"></a>利用IP地址获取域名</h3><p>struct hostent * gethostbyaddr(const char * addr, socklen_t len, int family);</p>
<pre><code>struct hostent  
{  
    char * h_name;  //官方域名  
    char ** h_aliases; //别名，一个IP可以绑定多个域名  
    int h_addrtype;  // IP地址类型 IPV4 OR IPV6  
    int h_length; //地址长度  
    char ** h_addr_list; //IP地址信息  
}  </code></pre><p>char* inet_ntoa(struct in_addr adr) 把32位ip地址转化为字符串，失败时返回-1  </p>
<p>指针对象不明确时，可以使用void指针类型  </p>
<h2 id="销毁僵尸进程"><a href="#销毁僵尸进程" class="headerlink" title="销毁僵尸进程"></a>销毁僵尸进程</h2><p>僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息,<br>那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。</p>
<h3 id="wait函数销毁僵尸进程"><a href="#wait函数销毁僵尸进程" class="headerlink" title="wait函数销毁僵尸进程"></a>wait函数销毁僵尸进程</h3><p>#inlcude &lt;sys/wait.h&gt;<br>pid_t wait(int *statloc); //成功时返回终止的子进程ID，失败时返回-1<br>WIFEXITED 子进程正常终止时返回“真”<br>WEXITSTATUS返回子进程的返回值<br>调用wait函数时，如果没有已终止的子进程，那么程序将阻塞直到有子进程终止  </p>
<h3 id="waitpid函数销毁僵尸进程"><a href="#waitpid函数销毁僵尸进程" class="headerlink" title="waitpid函数销毁僵尸进程"></a>waitpid函数销毁僵尸进程</h3><p>#inlcude &lt;sys/wait.h&gt;<br>pid_t waitpid(pid_t pid, int * statloc, int options); //成功时返回终止的子进程ID(或0)，失败时返回-1<br>pid 等待终止的目标子进程ID，若传递-1，则与wait函数相同，可以等待任意子进程终止<br>statloc 与wait函数的statloc参数具有相同含义<br>options 传递头文件sys/wait.h中声明的常量WNOHANG，即使没有终止的子进程也不会进入阻塞状态，而是返回0并退出程序  </p>
<h3 id="信号（signal-处理机制"><a href="#信号（signal-处理机制" class="headerlink" title="信号（signal)处理机制"></a>信号（signal)处理机制</h3><p>#inlcude &lt;signal.h&gt;  </p>
<p>void (*signal(int signo, void (*func)(int)))(int); //为了在产生信号时调用，返回之前注册的函数指针<br>发生信号时将唤醒由于调用sleep函数而进入阻塞状态的进程</p>
<p>SIGALRM：已到通过调用alarm函数注册的时间<br>SIGINT：输入CTRL+C<br>SIGCHLD：子进程终止  </p>
<p>#include &lt;unistd.h&gt;</p>
<p>unsigned int alarm(unsigned int seconds); //返回0或以秒为单位的距SIGALRM信号发生所剩时间  </p>
<h3 id="sigaction函数处理信号"><a href="#sigaction函数处理信号" class="headerlink" title="sigaction函数处理信号"></a>sigaction函数处理信号</h3><p>#include &lt;signal.h&gt;  </p>
<p>int sigaction(int signo, const struct sigaction * act, struct sigaction * oldact); //成功时返回0，失败时返回-1  </p>
<pre><code>struct sigaction
{
    void (*sa_handler)(int);
    sigset_t sa_mask;
    int sa_flags;
}</code></pre><p>sa_handler成员保存信号处理函数的指针。sa_mask和sa_flags的所有位均初始化为0  </p>
<h3 id="并发服务"><a href="#并发服务" class="headerlink" title="并发服务"></a>并发服务</h3><p>调用fork函数时复制父进程的所有资源，不包括套接字。套接字并非进程所有，进程拥有代表相应套接字的文件描述符  </p>
<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>#include &lt;unistd.h&gt;  </p>
<p>int pipe(int filedes[2]); //成功时返回0，失败时返回-1<br>filedes[0] 通过管道接收数据时使用的文件描述符， 即管道入口<br>filedes[1] 通过管道传输数据时使用的文件描述符，时管道出口</p>
<h2 id="I-O复用-select函数使用"><a href="#I-O复用-select函数使用" class="headerlink" title="I/O复用 select函数使用"></a>I/O复用 select函数使用</h2><p>使用select函数时可以将多个文件描述符统一进行监视，集中时需要按照监事项（接收、传输、异常）进行分区，即按照上述3种监视项分成3类  </p>
<p>#include &lt;sys/select.h&gt;<br>#include &lt;sys/time.h&gt;  </p>
<p>int select(int maxfd, fd_set * readset, fd_set * writeset, fd_set * excepset, const struct timeval * timeout);<br>maxfd  监视对象文件描述符数量<br>readset 将所有关注“是否存在待读取数据”的文件描述符注册到fd_set型变量，并传递其地址值<br>writeset 将所有关注“是否可传输无阻塞数据”的文件描述符注册到fd_set型变量，并传递其地址值<br>exceptset 将所有关注“是否发生异常”的文件描述符注册到fd_set型变量，并传递其地址值<br>timeout 调用select函数后，为防止陷入无限阻塞状态，传递超时信息<br>返回值  失败时返回-1，成功时返回大于0的值、该值为发生事件的文件描述符数  </p>
<pre><code>struct timeval
{
    long tv_sec; //seconds
    long tv_usec; //microseconds
}</code></pre><p>指定超时函数select函数长时间处于阻塞状态,超时后select函数返回0  </p>
<p>FD_ZERO(fd_set * fdset):将fd_set变量所有位初始化为0<br>FD_SET(int fd, fd_set * fdset):在参数fdset指向的变量中注册文件描述符fd的信息<br>FD_CLR(int fd, fd_set * fdset):从参数fdset指向的变量中清楚文件描述符fd的信息<br>FD_ISSET(int fd, fd_set * fdset):若参数fdset指向的变量中包含文件描述符fd的信息，则返回“真”  </p>
<h2 id="发送紧急消息-带外数据"><a href="#发送紧急消息-带外数据" class="headerlink" title="发送紧急消息(带外数据)"></a>发送紧急消息(带外数据)</h2><p>MSG_OOB:发送紧急消息，用于传输带外数据（Out-of-band data）<br>通过可选项MSG_OOB传输数据时只传输1个字节<br>紧急指针指向紧急消息的下一个位置<br>通过MSG_OOB可选项传递数据时不会加快数据传输速度<br>除紧急指针的前面一个字节外，数据接收方将通过调用常用输入函数读取剩余部分。紧急消息的意义在于督促消息处理，而非紧急传输形式受限的消息  ‘</p>
<h3 id="检查输入缓冲"><a href="#检查输入缓冲" class="headerlink" title="检查输入缓冲"></a>检查输入缓冲</h3><p>同时设置MSG_PEEK选项和MSG_DONTWAIT选项，以验证输入缓冲中是否存在接收的数据。<br>MSG_PEEK 验证输入缓冲区是否存在接收数据，不会删除输入缓冲区中数据<br>MSG_DONTROUTE 数据传输过程中不参照路由（Routing）表，在本地（Local）网络中寻找目的地  </p>
<h3 id="readv-amp-writev函数"><a href="#readv-amp-writev函数" class="headerlink" title="readv &amp; writev函数"></a>readv &amp; writev函数</h3><p>通过writev函数可以将分散保存在多个缓冲中的数据一并发送，通过readv函数可以由多个缓冲分别接收<br>#include &lt;sys/uio.h&gt;<br>ssize_t writev(int filedes, const struct iovec * iov, int iovcnt); //成功时返回发送的字节数，失败时返回-1<br>filedes 表示数据传输的套接字文件描述符。但该函数并不只限于套接字<br>iov iovec结构体数组的地址值，结构体iovec中包含待发送数据的位置和大小信息<br>iovcnt  向第二个参数传递的数组长度  </p>
<pre><code>struct iovec
{
    void * iov_base; //缓冲地址
    size_t iov_len; //缓冲大小
}</code></pre><p>#include &lt;sys/uio.h&gt;<br>ssize_t readv(int filedes, const struct iovec * iov, int iocnt); //成功时返回接收的字节数，失败时返回-1  </p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C语言网络编程</tag>
      </tags>
  </entry>
</search>
